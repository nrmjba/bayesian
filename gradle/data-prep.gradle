ext.dataDir = "$rootDir/data"

task factbookDownload(type: Download) {
    destinationDir file("$dataDir")
    url    'http://jmatchparser.sourceforge.net/factbook/data/factbook.xml.gz'
//   'http://jmatchparser.sourceforge.net/factbook/data/factbook.xsd'
    doLast {
        ant.gunzip src: destinationFile, dest: destinationDir
    }
}

task factbookCountriesXml(dependsOn: factbookDownload) << {
    ant.xslt style: "$dataDir/factbook-countries.xsl", out: "$dataDir/factbook-countries.xml", in: "$dataDir/factbook.xml"
}


task factbookCountriesJson(type: Exec, dependsOn: factbookCountriesXml) {
    inputs.file  "$dataDir/factbook.xml"
    outputs.file "$dataDir/factbook-countries.json"
    workingDir dataDir
    standardOutput = new ByteArrayOutputStream()

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'java -classpath saxon9.jar net.sf.saxon.Transform factbook-countries.xml xml-to-json.xsl > factbook-countries.json'
    } else {
        commandLine 'sh', '-c', 'java -classpath saxon9.jar net.sf.saxon.Transform factbook-countries.xml xml-to-json.xsl > factbook-countries.json'
    }

    doLast {
        outputs.files.each {
            if (it.name.substring(it.name.lastIndexOf(".")) == ".json") {
                it.setText(groovy.json.JsonOutput.prettyPrint(it.text))
            }
        }
    }
}

task factbookCountries(dependsOn: factbookCountriesJson)


///////////////////////////////////////////////
////////////// Groovy Task Class //////////////
///////////////////////////////////////////////
class Download extends DefaultTask {
    @Input File destinationDir
    @Input String url
    @Input @Optional String xsdUrl

    @TaskAction
    download() {
        destinationFile.bytes = new URL(url).bytes
    }

    String getDownloadFileName() {
        url.substring(url.lastIndexOf('/'))
    }

    @OutputFile
    File getDestinationFile() {
        new File(destinationDir, downloadFileName)
    }
}


class XsltTask extends DefaultTask {
    @Input String inputXml
    @Input String xslt
    @Input String output

    @TaskAction
    format() {
        if (new File(inputXml).exists()) {
            ant.xslt(in: inputXml,
                    style:xslt,
                    out:output
            )
        }
    }

    @InputFile
    File getInputXmlFile() {
        new File(inputXml)
    }

    @OutputFile
    File getDestinationFile() {
        new File(output)
    }
}
